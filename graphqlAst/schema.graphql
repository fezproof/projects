# ********************************************************************************
# uniST definitions
# ********************************************************************************

interface UnistData {
  # empty interface
  id: ID
}

interface UnistPoint {
  line: Int!
  column: Int!
  offset: Int
}

interface UnistPosition {
  start: UnistPoint!
  end: UnistPoint!
  indent: Int
}

interface UnistNode {
  type: String!
  data: UnistData
  position: UnistPosition
}

interface UnistParent implements UnistNode {
  type: String!
  data: UnistData
  position: UnistPosition

  # children: [UnistNode!]!
}

interface UnistLiteral implements UnistNode {
  type: String!
  data: UnistData
  position: UnistPosition
}

# ********************************************************************************
# mdAST definitions
# ********************************************************************************

interface MdastResource {
  url: String!
  title: String
}

interface MdastAssociation {
  identifier: String!
  label: String
}

enum MdastReferenceType {
  shortcut
  collapsed
  full
}

interface Reference implements MdastAssociation {
  identifier: String!
  label: String

  referenceType: MdastReferenceType!
}

interface MdastAlternative {
  alt: String
}

union MdastStaticPhrasingContent =
    Break
  | Emphasis
  | HTML
  | Image
  | ImageReference
  | InlineCode
  | Strong
  | Text

union MdastPhrasingContent =
    Link
  | LinkReference
  | Break
  | Emphasis
  | HTML
  | Image
  | ImageReference
  | InlineCode
  | Strong
  | Text

union MdastListContent = ListItem

union MdastContent = Definition | Paragraph

"type MdastFlowContent = Blockquote | Code | Heading | HTML | List | ThematicBreak | Content"
union MdastFlowContent =
    Blockquote
  | Code
  | Heading
  | HTML
  | List
  | ThematicBreak
  | Definition
  | Paragraph

"type MdastAllContent = MdastFlowContent | MdastListContent | MdastPhrasingContent"
union MdastAllContent =
    Blockquote
  | Code
  | Heading
  | List
  | ThematicBreak
  | Definition
  | Paragraph
  | ListItem
  | Link
  | LinkReference
  | Break
  | Emphasis
  | HTML
  | Image
  | ImageReference
  | InlineCode
  | Strong
  | Text

"""
The transparent content model is derived from the content model of its parent.
Effectively, this is used to prohibit nested links (and link references).
"""
union MdastTransparentContent =
    Blockquote
  | Code
  | Heading
  | List
  | ThematicBreak
  | Definition
  | Paragraph
  | ListItem
  | Link
  | LinkReference
  | Break
  | Emphasis
  | HTML
  | Image
  | ImageReference
  | InlineCode
  | Strong
  | Text

interface MdastParent implements UnistParent & UnistNode {
  type: String!
  data: UnistData
  position: UnistPosition

  # children: [MdastAllContent!]!
}

interface Literal implements UnistLiteral & UnistNode {
  type: String!
  data: UnistData
  position: UnistPosition

  value: String!
}
"""
Root can be used as the root of a tree, never as a child. Its content model is not limited to flow content, but can contain any mdast content with the restriction that all content must be of the same category.
"""
type Root implements MdastParent & UnistParent & UnistNode {
  "Always will equal 'root'"
  type: String!
  data: UnistData
  position: UnistPosition
  children: [MdastAllContent!]!
}

type Paragraph implements MdastParent & UnistParent & UnistNode {
  "Always will equal 'paragraph'"
  type: String!
  data: UnistData
  position: UnistPosition
  children: [MdastPhrasingContent!]!
}

type Heading implements MdastParent & UnistParent & UnistNode {
  "Always will equal 'heading'"
  type: String!
  data: UnistData
  position: UnistPosition
  children: [MdastPhrasingContent!]!

  """
  A depth field must be present.
  A value of 1 is said to be the highest rank and 6 the lowest.
  """
  depth: Int!
}

type ThematicBreak implements UnistNode {
  "Always equals thematicBreak"
  type: String!
  data: UnistData
  position: UnistPosition
}

type Blockquote implements MdastParent & UnistParent & UnistNode {
  "Always will equal 'blockQuote'"
  type: String!
  data: UnistData
  position: UnistPosition
  children: [MdastFlowContent!]!
}

type List implements MdastParent & UnistParent & UnistNode {
  "Always will equal 'list'"
  type: String!
  data: UnistData
  position: UnistPosition
  children: [MdastListContent!]!

  """
  An ordered field can be present.
  It represents that the items have been intentionally ordered (when true), or that the order of items is not important (when false or not present).
  """
  ordered: Boolean
  """
  A start field can be present.
  It represents, when the ordered field is true, the starting number of the list.
  """
  start: Int
  """
  A spread field can be present.
  It represents that one or more of its children are separated with a blank line from its siblings (when true), or not (when false or not present).
  """
  spread: Boolean
}

type ListItem implements MdastParent & UnistParent & UnistNode {
  "Always will equal 'listItem'"
  type: String!
  data: UnistData
  position: UnistPosition
  children: [MdastFlowContent!]!

  """
  A spread field can be present.
  It represents that the item contains two or more children separated by a blank line (when true), or not (when false or not present).
  """
  spread: Boolean
}

type HTML implements Literal & UnistLiteral & UnistNode {
  "Always will equal 'html'"
  type: String!
  data: UnistData
  position: UnistPosition
  value: String!
}

type Code implements Literal & UnistLiteral & UnistNode {
  "Always will equal 'code'"
  type: String!
  data: UnistData
  position: UnistPosition
  value: String!

  """
  A lang field can be present.
  It represents the language of computer code being marked up.
  """
  lang: String
  """
  If the lang field is present, a meta field can be present.
  It represents custom information relating to the node.
  """
  meta: String
}

type Definition implements UnistNode & MdastAssociation & MdastResource {
  "Always will equal 'definition'"
  type: String!
  data: UnistData
  position: UnistPosition

  identifier: String!
  label: String

  url: String!
  title: String
}

type Text implements Literal & UnistLiteral & UnistNode {
  "Always will equal 'text'"
  type: String!
  data: UnistData
  position: UnistPosition
  value: String!
}

type Emphasis implements MdastParent & UnistParent & UnistNode {
  "Always will equal 'emphasis'"
  type: String!
  data: UnistData
  position: UnistPosition
  children: [MdastTransparentContent!]!
}

type Strong implements MdastParent & UnistParent & UnistNode {
  "Always will equal 'strong'"
  type: String!
  data: UnistData
  position: UnistPosition
  children: [MdastTransparentContent!]!
}

type InlineCode implements Literal & UnistLiteral & UnistNode {
  "Always will equal 'inlineCode'"
  type: String!
  data: UnistData
  position: UnistPosition
  value: String!
}

type Break implements UnistNode {
  "Always will equal 'break'"
  type: String!
  data: UnistData
  position: UnistPosition
}

type Link implements MdastParent & UnistParent & UnistNode & MdastResource {
  "Always will equal 'link'"
  type: String!
  data: UnistData
  position: UnistPosition
  children: [MdastStaticPhrasingContent!]!
  url: String!
  title: String
}

type Image implements UnistNode & MdastResource & MdastAlternative {
  "Always will equal 'image'"
  type: String!
  data: UnistData
  position: UnistPosition
  url: String!
  title: String
  alt: String
}

type LinkReference implements MdastParent & UnistParent & UnistNode & Reference & MdastAssociation {
  "Always will equal 'linkReference'"
  type: String!
  data: UnistData
  position: UnistPosition
  children: [MdastStaticPhrasingContent!]!
  identifier: String!
  label: String
  referenceType: MdastReferenceType!
}

type ImageReference implements UnistNode & Reference & MdastAssociation & MdastAlternative {
  "Always will equal 'imageReference'"
  type: String!
  data: UnistData
  position: UnistPosition
  identifier: String!
  label: String
  referenceType: MdastReferenceType!
  alt: String
}

# ********************************************************************************
# base types
# ********************************************************************************

type Query {
  markdown: Root
}
